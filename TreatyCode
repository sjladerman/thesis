import numpy as np
import pandas as pd
import math
from numpy import linalg
import matplotlib.pyplot as plt
from scipy.stats.stats import pearsonr

# command / to comment out big sections of code

# with or without prolif=3 in calculations (states that acquired will stay in global prolif levels)
# set equal to 1 to remove from calcs, 0 otherwise
no_acq = 0

# with or without the NPT NWS in calculations (NWS will stay in global prolif levels)
# these states are China (710), France (220), Russia (365), UK (200), and US (2)
# set equal to 1 to remove from calcs, 0 otherwise
no_NWS = 1

# start and end years
startyear = 1967
endyear = 2000

# ARRAY CREATION

# read in the country, year, proliferation level info from excel to pandas to single numpy array
prolif40s = pd.read_excel("TreatyData '45-'49 v1.xlsx", sheetname="ProliferationLevel")
prolif40s_array = prolif40s.as_matrix()
prolif50s = pd.read_excel("TreatyData '50-'59 v1.xlsx", sheetname="ProliferationLevel")
prolif50s_array = prolif50s.as_matrix()
prolif60s = pd.read_excel("TreatyData '60-'69 v1.xlsx", sheetname="ProliferationLevel")
prolif60s_array = prolif60s.as_matrix()
prolif70s = pd.read_excel("TreatyData '70-'79 v1.xlsx", sheetname="ProliferationLevel")
prolif70s_array = prolif70s.as_matrix()
prolif80s = pd.read_excel("TreatyData '80-'89 v1.xlsx", sheetname="ProliferationLevel")
prolif80s_array = prolif80s.as_matrix()
prolif90s = pd.read_excel("TreatyData '90-'00 v1.xlsx", sheetname="ProliferationLevel")
prolif90s_array = prolif90s.as_matrix()
prolif_array = np.append(prolif40s_array, prolif50s_array, axis=0)
prolif_array = np.append(prolif_array, prolif60s_array, axis=0)
prolif_array = np.append(prolif_array, prolif70s_array, axis=0)
prolif_array = np.append(prolif_array, prolif80s_array, axis=0)
prolif_array = np.append(prolif_array, prolif90s_array, axis=0)

# calculate world proliferation totals (with NWS/acq no matter what) and store that in a dictionary
j = startyear
world_prolif_dict = {}
while j <= endyear:
    variable = np.empty((0, 3), dtype="int")
    i = 0
    while i < len(prolif_array):
        if prolif_array[i, 1] == j:
            variable = np.vstack([variable, prolif_array[i]])
        i += 1
    # now calculating the sum of proliferation levels and adding that to a new dict
    sum_array = np.sum(variable, axis=0)
    world_prolif_dict[j] = sum_array[2]
    j += 1

# set up boolean mask to determine acq & remove acq from prolif_array
if no_acq == 1:
    acqbool = np.equal(prolif_array[:, 2], 3)
    acqarray = acqbool.astype(int)
    acqarray = np.reshape(acqarray, (len(acqarray), 1))
    acqindex = np.nonzero(acqarray)
    prolif_array = np.delete(prolif_array, acqindex, 0)

# delete China (710), France (220), Russia (365), UK (200), and US (2) from prolif_array
if no_NWS == 1:
   prolif_array = prolif_array[(prolif_array[:, 0] != 2) & (prolif_array[:, 0] != 200) & (prolif_array[:, 0] != 220)
                               & (prolif_array[:, 0] != 365) & (prolif_array[:, 0] != 710)]

# read in the country, year, NPT, NWFZ info from excel to pandas to single numpy array
# col 0 = ccode, col 1 = year, col 2 = NPT (0,1,2), col 3 = NWFZ (0,1,2)
treaty40s = pd.read_excel("TreatyData '45-'49 v1.xlsx", sheetname="CountryTreatiesClean")
treaty40s_array = treaty40s.as_matrix()
treaty50s = pd.read_excel("TreatyData '50-'59 v1.xlsx", sheetname="CountryTreatiesClean")
treaty50s_array = treaty50s.as_matrix()
treaty60s = pd.read_excel("TreatyData '60-'69 v1.xlsx", sheetname="CountryTreatiesClean")
treaty60s_array = treaty60s.as_matrix()
treaty70s = pd.read_excel("TreatyData '70-'79 v1.xlsx", sheetname="CountryTreatiesClean")
treaty70s_array = treaty70s.as_matrix()
treaty80s = pd.read_excel("TreatyData '80-'89 v1.xlsx", sheetname="CountryTreatiesClean")
treaty80s_array = treaty80s.as_matrix()
treaty90s = pd.read_excel("TreatyData '90-'00 v1.xlsx", sheetname="CountryTreatiesClean")
treaty90s_array = treaty90s.as_matrix()
treaty_array = np.append(treaty40s_array, treaty50s_array, axis=0)
treaty_array = np.append(treaty_array, treaty60s_array, axis=0)
treaty_array = np.append(treaty_array, treaty70s_array, axis=0)
treaty_array = np.append(treaty_array, treaty80s_array, axis=0)
treaty_array = np.append(treaty_array, treaty90s_array, axis=0)

# remove NWS from treaty_array
if no_acq == 1:
    treaty_array = np.delete(treaty_array, acqindex, 0)

# delete China (710), France (220), Russia (365), UK (200), and US (2) from treaty_array
if no_NWS == 1:
   treaty_array = treaty_array[(treaty_array[:, 0] != 2) & (treaty_array[:, 0] != 200) & (treaty_array[:, 0] != 220)
                               & (treaty_array[:, 0] != 365) & (treaty_array[:, 0] != 710)]

# this section separates out NPT signatures and ratifications
# col 4 = NPT sign, col 5 = NPT ratify
NPTsigBoolean = np.logical_or(treaty_array[:, 2] == 1, treaty_array[:, 2] == 2)
NPTratBoolean = np.greater_equal(treaty_array[:, 2], 2)
NPTsigColumn = NPTsigBoolean.astype(int)
NPTratColumn = NPTratBoolean.astype(int)
NPTsigColumn = np.reshape(NPTsigColumn, (len(NPTsigColumn), 1))
NPTratColumn = np.reshape(NPTratColumn, (len(NPTratColumn), 1))
treaty_array = np.concatenate((treaty_array, NPTsigColumn), axis=1)
treaty_array = np.concatenate((treaty_array, NPTratColumn), axis=1)

# this section separates out NWFZ signatures and ratifications
# col 6 = NWFZ sign, col 7 = NWFZ ratify
NWFZsigBoolean = np.logical_or(treaty_array[:, 3] == 1, treaty_array[:, 3] == 2)
NWFZratBoolean = np.greater_equal(treaty_array[:, 3], 2)
NWFZsigColumn = NWFZsigBoolean.astype(int)
NWFZratColumn = NWFZratBoolean.astype(int)
NWFZsigColumn = np.reshape(NWFZsigColumn, (len(NWFZsigColumn), 1))
NWFZratColumn = np.reshape(NWFZratColumn, (len(NWFZratColumn), 1))
treaty_array = np.concatenate((treaty_array, NWFZsigColumn), axis=1)
treaty_array = np.concatenate((treaty_array, NWFZratColumn), axis=1)

# vread in the country, year, country normalization info from excel to pandas to single numpy array
cNormal40s = pd.read_excel("TreatyData '45-'49 v1.xlsx", sheetname="CountryNormalization")
cNormal40s_array = cNormal40s.as_matrix()
cNormal50s = pd.read_excel("TreatyData '50-'59 v1.xlsx", sheetname="CountryNormalization")
cNormal50s_array = cNormal50s.as_matrix()
cNormal60s = pd.read_excel("TreatyData '60-'69 v1.xlsx", sheetname="CountryNormalization")
cNormal60s_array = cNormal60s.as_matrix()
cNormal70s = pd.read_excel("TreatyData '70-'79 v1.xlsx", sheetname="CountryNormalization")
cNormal70s_array = cNormal70s.as_matrix()
cNormal80s = pd.read_excel("TreatyData '80-'89 v1.xlsx", sheetname="CountryNormalization")
cNormal80s_array = cNormal80s.as_matrix()
cNormal90s = pd.read_excel("TreatyData '90-'00 v1.xlsx", sheetname="CountryNormalization")
cNormal90s_array = cNormal90s.as_matrix()
cNormal_array = np.append(cNormal40s_array, cNormal50s_array, axis=0)
cNormal_array = np.append(cNormal_array, cNormal60s_array, axis=0)
cNormal_array = np.append(cNormal_array, cNormal70s_array, axis=0)
cNormal_array = np.append(cNormal_array, cNormal80s_array, axis=0)
cNormal_array = np.append(cNormal_array, cNormal90s_array, axis=0)
# for separate networks, need to divide the last column by 2
cNormal_array[:, 2] = cNormal_array[:, 2] / 2

# remove NWS from cNormal_array
if no_acq == 1:
    cNormal_array = np.delete(cNormal_array, acqindex, 0)

# delete China (710), France (220), Russia (365), UK (200), and US (2) from cNormal_array
if no_NWS == 1:
   cNormal_array = cNormal_array[(cNormal_array[:, 0] != 2) & (cNormal_array[:, 0] != 200) & (cNormal_array[:, 0] != 220)
                                 & (cNormal_array[:, 0] != 365) & (cNormal_array[:, 0] != 710)]

# read in the treaty, year, treaty normalization info from excel to pandas to single numpy array
tNormal40s = pd.read_excel("TreatyData '45-'49 v1.xlsx", sheetname="TreatyNormalization")
tNormal40s_array = tNormal40s.as_matrix()
tNormal50s = pd.read_excel("TreatyData '50-'59 v1.xlsx", sheetname="TreatyNormalization")
tNormal50s_array = tNormal50s.as_matrix()
tNormal60s = pd.read_excel("TreatyData '60-'69 v1.xlsx", sheetname="TreatyNormalization")
tNormal60s_array = tNormal60s.as_matrix()
tNormal70s = pd.read_excel("TreatyData '70-'79 v1.xlsx", sheetname="TreatyNormalization")
tNormal70s_array = tNormal70s.as_matrix()
tNormal80s = pd.read_excel("TreatyData '80-'89 v1.xlsx", sheetname="TreatyNormalization")
tNormal80s_array = tNormal80s.as_matrix()
tNormal90s = pd.read_excel("TreatyData '90-'00 v1.xlsx", sheetname="TreatyNormalization")
tNormal90s_array = tNormal90s.as_matrix()
tNormal_array = np.append(tNormal40s_array, tNormal50s_array, axis=0)
tNormal_array = np.append(tNormal_array, tNormal60s_array, axis=0)
tNormal_array = np.append(tNormal_array, tNormal70s_array, axis=0)
tNormal_array = np.append(tNormal_array, tNormal80s_array, axis=0)
tNormal_array = np.append(tNormal_array, tNormal90s_array, axis=0)

# read in the country and treaty keys
countryKey = pd.read_excel("TreatyData '45-'49 v1.xlsx", sheetname="CountryKey")
countryKey_array = countryKey.as_matrix()
treatyKey = pd.read_excel("TreatyData '45-'49 v1.xlsx", sheetname="TreatyKey")

# delete China (710), France (220), Russia (365), UK (200), and US (2) from countryKey_array
if no_NWS == 1:
   countryKey_array = countryKey_array[(countryKey_array[:, 0] != 2) & (countryKey_array[:, 0] != 200)
                                       & (countryKey_array[:, 0] != 220) & (countryKey_array[:, 0] != 365)
                                       & (countryKey_array[:, 0] != 710)]

# cycle through country normalizations to get matrices by year and store in a dictionary
j = startyear
cNormal_dict = {}
while j <= endyear:
    variable = np.empty((0, 3), dtype="int")
    i = 0
    while i < len(cNormal_array):
        if cNormal_array[i, 1] == j:
            variable = np.vstack([variable, cNormal_array[i]])
        i += 1
    cNormal_dict[j] = variable
    j += 1

# cycle through treaty normalizations to get matrices by year and store in a dictionary
j = startyear
tNormal_dict = {}
while j <= endyear:
    variable = np.empty((0, 3), dtype="int")
    i = 0
    while i < len(tNormal_array):
        if tNormal_array[i, 1] == j:
            variable = np.vstack([variable, tNormal_array[i]])
        i += 1
    # starting in 1968, want to get NPT normalization as total countries in that year
    if j > 1967:
        variable = np.vstack([variable, [6, j, len(cNormal_dict[j])]])
    tNormal_dict[j] = variable
    j += 1

# cycle through proliferation levels to get matrices by year and store in a dictionary
j = startyear
prolif_dict = {}
while j <= endyear:
    variable = np.empty((0, 3), dtype="int")
    i = 0
    while i < len(prolif_array):
        if prolif_array[i, 1] == j:
            variable = np.vstack([variable, prolif_array[i]])
        i += 1
    prolif_dict[j] = variable
    j += 1


# SEPARATING OUT SIGNATURE AND RATIFICATION NETWORKS

# creating an array for sig with ccode (0), year (1), NPT sig (2), NWFZ sig (3)
ccode_column = np.reshape(treaty_array[:, 0], (len(treaty_array[:, 0]), 1))
year_column = np.reshape(treaty_array[:, 1], (len(treaty_array[:, 1]), 1))
sig_treaty_array = np.concatenate((ccode_column, year_column), axis=1)
sig_treaty_array = np.concatenate((sig_treaty_array, NPTsigColumn), axis=1)
sig_treaty_array = np.concatenate((sig_treaty_array, NWFZsigColumn), axis=1)

# creating an array for rat with ccode (0), year (1), NPT rat (2), NWFZ rat (3)
ccode_column = np.reshape(treaty_array[:, 0], (len(treaty_array[:, 0]), 1))
year_column = np.reshape(treaty_array[:, 1], (len(treaty_array[:, 1]), 1))
rat_treaty_array = np.concatenate((ccode_column, year_column), axis=1)
rat_treaty_array = np.concatenate((rat_treaty_array, NPTratColumn), axis=1)
rat_treaty_array = np.concatenate((rat_treaty_array, NWFZratColumn), axis=1)

# cycle through sig array to get matrices by year and store in a dict (sig network)
j = startyear
sig_treaty_dict = {}
while j <= endyear:
    variable = np.empty((0, 4), dtype="int")  # change to (0,8) for full network
    i = 0
    while i < len(sig_treaty_array):
        if sig_treaty_array[i, 1] == j:
            variable = np.vstack([variable, sig_treaty_array[i]])
        i += 1
    sig_treaty_dict[j] = variable
    j += 1

# cycle through rat array to get matrices by year and store in a dict (rat network)
j = startyear
rat_treaty_dict = {}
while j <= endyear:
    variable = np.empty((0, 4), dtype="int")  # change to (0,8) for full network
    i = 0
    while i < len(rat_treaty_array):
        if rat_treaty_array[i, 1] == j:
            variable = np.vstack([variable, rat_treaty_array[i]])
        i += 1
    rat_treaty_dict[j] = variable
    j += 1

# SIGNATURE NETWORK
# calculating the normalized affiliation matrix (matrix A)
# also storing the list of countries by year (only done here and not for rat as they're the same)
j = startyear
normal_sig_matrix_dict = {}
country_list_yearly = {}
while j <= endyear:
    i = 0
    variable = np.empty((len(sig_treaty_dict[j]), 2))  # the 2 would be a 4 for full network
    countries = np.empty((len(sig_treaty_dict[j]), 1), dtype="int")
    while i < len(sig_treaty_dict[j]):
        countries[i] = sig_treaty_dict[j][i, 0]
        h = 0
        while h < 2:  # would be < 4 for full network
            # getting normalizations for NPT
            if h == 0:
                if cNormal_dict[j][i, 2] == 0:
                    variable[i, h] = 0
                elif tNormal_dict[j][5, 2] == 0:
                    variable[i, h] = 0
                else:  # for full network, would look at h+4 for original treaty_dict value
                    variable[i, h] = sig_treaty_dict[j][i, h+2] / math.sqrt(cNormal_dict[j][i, 2] * tNormal_dict[j][5, 2])
            # getting normalizations for NWFZs
            else:
                total = tNormal_dict[j][0, 2] + tNormal_dict[j][1, 2] + tNormal_dict[j][2, 2] + tNormal_dict[j][3, 2] \
                        + tNormal_dict[j][4, 2]
                if cNormal_dict[j][i, 2] == 0:
                    variable[i, h] = 0
                elif total == 0:
                    variable[i, h] = 0
                else:  # would look at h+3 for original treaty_dict value
                    variable[i, h] = sig_treaty_dict[j][i, h+2] / math.sqrt(cNormal_dict[j][i, 2] * total)
            h += 1
        i += 1
    normal_sig_matrix_dict[j] = variable
    country_list_yearly[j] = countries
    j += 1

# RATIFICATION NETWORK
# calculating the normalized affiliation matrix (matrix A)
j = startyear
normal_rat_matrix_dict = {}
while j <= endyear:
    i = 0
    variable = np.empty((len(rat_treaty_dict[j]), 2))  # the 2 would be a 4 for full network
    while i < len(rat_treaty_dict[j]):
        h = 0
        while h < 2:  # would be < 4 for full network
            # getting normalizations for NPT
            if h == 0:
                if cNormal_dict[j][i, 2] == 0:
                    variable[i, h] = 0
                elif tNormal_dict[j][5, 2] == 0:
                    variable[i, h] = 0
                else:  # for full network, would look at h+4 for original treaty_dict value
                    variable[i, h] = rat_treaty_dict[j][i, h+2] / math.sqrt(cNormal_dict[j][i, 2] * tNormal_dict[j][5, 2])
            # getting normalizations for NWFZs
            else:
                total = tNormal_dict[j][0, 2] + tNormal_dict[j][1, 2] + tNormal_dict[j][2, 2] + tNormal_dict[j][3, 2] \
                        + tNormal_dict[j][4, 2]
                if cNormal_dict[j][i, 2] == 0:
                    variable[i, h] = 0
                elif total == 0:
                    variable[i, h] = 0
                else:  # would look at h+3 for original treaty_dict value
                    variable[i, h] = rat_treaty_dict[j][i, h+2] / math.sqrt(cNormal_dict[j][i, 2] * total)
            h += 1
        i += 1
    normal_rat_matrix_dict[j] = variable
    j += 1

# calculating the transposes of normalized affiliation matrices (matrix A') for sig
j = startyear
normal_sig_matrix_dict_t = {}
while j <= endyear:
    matrix = normal_sig_matrix_dict[j]
    tmatrix = matrix.transpose()
    normal_sig_matrix_dict_t[j] = tmatrix
    j += 1

# calculating the transposes of normalized affiliation matrices (matrix A') for rat
j = startyear
normal_rat_matrix_dict_t = {}
while j <= endyear:
    matrix = normal_rat_matrix_dict[j]
    tmatrix = matrix.transpose()
    normal_rat_matrix_dict_t[j] = tmatrix
    j += 1

# comembership matrix XN for sig
j = startyear
comember_sig_dict = {}
while j <= endyear:
    matrix = normal_sig_matrix_dict[j]
    tmatrix = normal_sig_matrix_dict_t[j]
    comember_sig_dict[j] = np.dot(matrix, tmatrix)
    j += 1

# comembership matrix XN for rat
j = startyear
comember_rat_dict = {}
while j <= endyear:
    matrix = normal_rat_matrix_dict[j]
    tmatrix = normal_rat_matrix_dict_t[j]
    comember_rat_dict[j] = np.dot(matrix, tmatrix)
    j += 1

# common actors matrix XM for sig
j = startyear
com_actor_sig_dict = {}
while j <= endyear:
    matrix = normal_sig_matrix_dict[j]
    tmatrix = normal_sig_matrix_dict_t[j]
    com_actor_sig_dict[j] = np.dot(tmatrix, matrix)
    j += 1

# common actors matrix XM for rat
j = startyear
com_actor_rat_dict = {}
while j <= endyear:
    matrix = normal_rat_matrix_dict[j]
    tmatrix = normal_rat_matrix_dict_t[j]
    com_actor_rat_dict[j] = np.dot(tmatrix, matrix)
    j += 1

# actor eigenvalues and eigenvectors for sig
j = startyear
evalues_countries_sig_dict = {}
evectors_countries_sig_dict = {}
while j <= endyear:
    w, v = linalg.eigh(comember_sig_dict[j])
    # finding max eigenvalue
    max_evalue = np.amax(w)
    if max_evalue == 0:
        # store a 0 if the eigenvalue is 0
        evectors_countries_sig_dict[j] = 0
    else:
        # finding location of max eigenvalue
        a = np.argmax(w)
        # store eigenvectors in the dictionary
        evectors_countries_sig_dict[j] = abs(v[:, a])
    # store eigenvalue in the dictionary
    evalues_countries_sig_dict[j] = math.sqrt(max_evalue)
    j += 1

# actor eigenvalues and eigenvectors for rat
j = startyear
evalues_countries_rat_dict = {}
evectors_countries_rat_dict = {}
while j <= endyear:
    w, v = linalg.eigh(comember_rat_dict[j])
    # finding max eigenvalue
    max_evalue = np.amax(w)
    if max_evalue == 0:
        # store a 0 if the eigenvalue is 0
        evectors_countries_rat_dict[j] = 0
    else:
        # finding location of max eigenvalue
        a = np.argmax(w)
        # store eigenvectors in the dictionary
        evectors_countries_rat_dict[j] = abs(v[:, a])
    # store eigenvalue in the dictionary
    evalues_countries_rat_dict[j] = math.sqrt(max_evalue)
    j += 1

# treaty eigenvalues and eigenvectors for sig
j = startyear
evalues_treaties_sig_dict = {}
evectors_treaties_sig_dict = {}
while j <= endyear:
    w, v = linalg.eigh(com_actor_sig_dict[j])
    # finding max eigenvalue
    max_evalue = np.amax(w)
    if max_evalue == 0:
        evectors_treaties_sig_dict[j] = 0
    else:
        # finding location of max eigenvalue
        a = np.argmax(w)
        evectors_treaties_sig_dict[j] = abs(v[:, a])
    # store eigenvalue in the dictionary
    evalues_treaties_sig_dict[j] = math.sqrt(max_evalue)
    j += 1

# treaty eigenvalues and eigenvectors for rat
j = startyear
evalues_treaties_rat_dict = {}
evectors_treaties_rat_dict = {}
while j <= endyear:
    w, v = linalg.eigh(com_actor_rat_dict[j])
    # finding max eigenvalue
    max_evalue = np.amax(w)
    if max_evalue == 0:
        evectors_treaties_rat_dict[j] = 0
    else:
        # finding location of max eigenvalue
        a = np.argmax(w)
        evectors_treaties_rat_dict[j] = abs(v[:, a])
    # store eigenvalue in the dictionary
    evalues_treaties_rat_dict[j] = math.sqrt(max_evalue)
    j += 1

# put ccode and tcode with centralities for signature network
# in treaty centrality, 1 = NPT sign, 2 = NWFZ sign
# for full network, treaty centrality would be 1=NPT sig, 2=NPT rat, 3=NWFZ sig, 4=NWFZ rat
j = startyear
country_centrality_sig_dict = {}
treaty_centrality_sig_dict = {}
treaties = np.array((1, 2))
treaties = np.reshape(treaties, (len(treaties), 1))
while j <= endyear:
    if type(evectors_countries_sig_dict[j]) == int:
        carray = np.reshape(country_list_yearly[j], (len(country_list_yearly[j]), 1))
        ecarray = np.zeros(len(country_list_yearly[j]))
        ecarray = np.reshape(ecarray, (len(ecarray), 1))
        newcarray = np.concatenate((carray, ecarray), axis=1)
        country_centrality_sig_dict[j] = newcarray
    else:
        carray = np.reshape(country_list_yearly[j], (len(country_list_yearly[j]), 1))
        ecarray = np.reshape(evectors_countries_sig_dict[j], (len(evectors_countries_sig_dict[j]), 1))
        newcarray = np.concatenate((carray, ecarray), axis=1)
        country_centrality_sig_dict[j] = newcarray
    if type(evectors_treaties_sig_dict[j]) == int:
        etarray = np.zeros(2)  # would be 4 for full network
        etarray = np.reshape(etarray, (len(etarray), 1))
        newtreaties = np.concatenate((treaties, etarray), axis=1)
        treaty_centrality_sig_dict[j] = newtreaties
    else:
        etarray = np.reshape(evectors_treaties_sig_dict[j], (len(evectors_treaties_sig_dict[j]), 1))
        newtreaties = np.concatenate((treaties, etarray), axis=1)
        treaty_centrality_sig_dict[j] = newtreaties
    j += 1

# put ccode and tcode with centralities for ratification network
# in treaty centrality, 1 = NPT rat, 2 = NWFZ rat
# for full network, treaty centrality would be 1=NPT sig, 2=NPT rat, 3=NWFZ sig, 4=NWFZ rat
j = startyear
country_centrality_rat_dict = {}
treaty_centrality_rat_dict = {}
treaties = np.array((1, 2))
treaties = np.reshape(treaties, (len(treaties), 1))
while j <= endyear:
    if type(evectors_countries_rat_dict[j]) == int:
        carray = np.reshape(country_list_yearly[j], (len(country_list_yearly[j]), 1))
        ecarray = np.zeros(len(country_list_yearly[j]))
        ecarray = np.reshape(ecarray, (len(ecarray), 1))
        newcarray = np.concatenate((carray, ecarray), axis=1)
        country_centrality_rat_dict[j] = newcarray
    else:
        carray = np.reshape(country_list_yearly[j], (len(country_list_yearly[j]), 1))
        ecarray = np.reshape(evectors_countries_rat_dict[j], (len(evectors_countries_rat_dict[j]), 1))
        newcarray = np.concatenate((carray, ecarray), axis=1)
        country_centrality_rat_dict[j] = newcarray
    if type(evectors_treaties_rat_dict[j]) == int:
        etarray = np.zeros(2)  # would be 4 for full network
        etarray = np.reshape(etarray, (len(etarray), 1))
        newtreaties = np.concatenate((treaties, etarray), axis=1)
        treaty_centrality_rat_dict[j] = newtreaties
    else:
        etarray = np.reshape(evectors_treaties_rat_dict[j], (len(evectors_treaties_rat_dict[j]), 1))
        newtreaties = np.concatenate((treaties, etarray), axis=1)
        treaty_centrality_rat_dict[j] = newtreaties
    j += 1

# get NPT siganture centrality scores array for y values
j = startyear
NPTsigarray = list()
while j <= endyear:
    NPTsigarray.append(treaty_centrality_sig_dict[j][0, 1])
    j += 1

# get NWFZ signature centrality scores array for y values
j = startyear
NWFZsigarray = list()
while j <= endyear:
    NWFZsigarray.append(treaty_centrality_sig_dict[j][1, 1])  # would be [2,1] for full network
    j += 1

# get NPT ratification centrality scores array for y values
j = startyear
NPTratarray = list()
while j <= endyear:
    NPTratarray.append(treaty_centrality_rat_dict[j][0, 1])  # would be [1,1] for full network
    j += 1

# get NWFZ ratification centrality scores array for y values
j = startyear
NWFZratarray = list()
while j <= endyear:
    NWFZratarray.append(treaty_centrality_rat_dict[j][1, 1])  # would be [3,1] for full network
    j += 1

# get year array for x values
j = startyear
yeararray = list()
while j <= endyear:
    yeararray.append(j)
    j += 1

# store centralities and proliferation level by state
prolif_level_dict_bycountry = {}
sig_cent_dict_bycountry = {}
rat_cent_dict_bycountry = {}
for country in countryKey_array[:, 0]:
    j = startyear
    prolif = list()
    cent_sig = list()
    cent_rat = list()
    while j <= endyear:
        y = np.argwhere(prolif_dict[j][:, 0] == country)
        if len(y) == 1:
            prolif.append(int(prolif_dict[j][y, 2]))
            y = np.argwhere(country_centrality_sig_dict[j][:, 0] == country)
            if len(y) == 1:
                cent_sig.append(float(country_centrality_sig_dict[j][y, 1]))
                y = np.argwhere(country_centrality_rat_dict[j][:, 0] == country)
                if len(y) == 1:
                    cent_rat.append(float(country_centrality_rat_dict[j][y, 1]))
        j += 1
    prolif_level_dict_bycountry[country] = prolif
    sig_cent_dict_bycountry[country] = cent_sig
    rat_cent_dict_bycountry[country] = cent_rat


# CORRELATIONS


# Pearson correlation
# (x,y) in and (Pearson's correlation coefficent,2-tailed p-value) out

# # checking data to see if it's normal RATIFICATION
# plt.plot(country_centrality_rat_dict[1985][:,1], 'ko')
#
# # checking data to see if it's normal SIGNATURE
# plt.plot(country_centrality_sig_dict[1975][:,1], 'ko')
#
# # data seems fairly normal but pretty concentrated (almost discrete); at least not too skewed


# CORRELATION OF STATE CENTRALITY AND PROLIF LEVEL BY YEAR


# save dictionary of correlations for each year of proliferation levels of all states
# vs. centrality levels of all states RATIFICATION NETWORK
j = startyear
corr_yearly_dict_rat = {}
pvalue_yearly_dict_rat = {}
while j <= endyear:
    y = pearsonr(country_centrality_rat_dict[j][:, 1], prolif_dict[j][:, 2])
    corr_yearly_dict_rat[j] = y[0]
    pvalue_yearly_dict_rat[j] = y[1]
    j += 1

j = startyear
corr_yearly_array_rat = list()
pvalue_yearly_array_rat = list()
while j <= endyear:
    corr_yearly_array_rat.append(corr_yearly_dict_rat[j])
    pvalue_yearly_array_rat.append(pvalue_yearly_dict_rat[j])
    j += 1

# save dictionary of correlations for each year of proliferation levels of all states
# vs. centrality levels of all states SIGNATURE NETWORK
j = startyear
corr_yearly_dict_sig = {}
pvalue_yearly_dict_sig = {}
while j <= endyear:
    y = pearsonr(country_centrality_sig_dict[j][:, 1], prolif_dict[j][:, 2])
    corr_yearly_dict_sig[j] = y[0]
    pvalue_yearly_dict_sig[j] = y[1]
    j += 1

j = startyear
corr_yearly_array_sig = list()
pvalue_yearly_array_sig = list()
while j <= endyear:
    corr_yearly_array_sig.append(corr_yearly_dict_sig[j])
    pvalue_yearly_array_sig.append(pvalue_yearly_dict_sig[j])
    j += 1


# CORRELATION OF CENT VS. PROLIF BY STATE (OVER ALL YEARS)


corr_bystate_dict_sig = {}
corr_bystate_dict_rat = {}
pvalue_bystate_dict_sig = {}
pvalue_bystate_dict_rat = {}
for country in countryKey_array[:, 0]:
    y = pearsonr(sig_cent_dict_bycountry[country], prolif_level_dict_bycountry[country])
    z = pearsonr(rat_cent_dict_bycountry[country], prolif_level_dict_bycountry[country])
    if y[0] != y[0]:
        corr_bystate_dict_sig[country] = 0
    else:
        corr_bystate_dict_sig[country] = y[0]
    if y[1] != y[1]:
        pvalue_bystate_dict_sig[country] = 0
    else:
        pvalue_bystate_dict_sig[country] = y[1]
    if z[0] != z[0]:
        corr_bystate_dict_rat[country] = 0
    else:
        corr_bystate_dict_rat[country] = z[0]
    if z[1] != z[1]:
        pvalue_bystate_dict_rat[country] = 0
    else:
        pvalue_bystate_dict_rat[country] = z[1]

corr_bystate_array_sig = list()
corr_bystate_array_rat = list()
pvalue_bystate_array_sig = list()
pvalue_bystate_array_rat = list()
# print table of correlations and pvalues
for country in countryKey_array[:, 0]:
    value = np.where(countryKey_array == country)
    value2 = countryKey_array[value[0]]
    countryName = value2[0, 1]
    # print(countryName, ' has a signature correlation of ',corr_bystate_dict_sig[country], ' with p-value ', pvalue_bystate_dict_sig[country])
    # print(countryName, ' has a ratification correlation of ',corr_bystate_dict_rat[country], ' with p-value ', pvalue_bystate_dict_rat[country])
    corr_bystate_array_sig.append(corr_bystate_dict_sig[country])
    corr_bystate_array_rat.append(corr_bystate_dict_rat[country])
    pvalue_bystate_array_sig.append(pvalue_bystate_dict_sig[country])
    pvalue_bystate_array_rat.append(pvalue_bystate_dict_rat[country])

i = 0
countryName_array = list()
countryCode_array = list()
while i < len(countryKey_array):
    countryName_array.append(countryKey_array[i, 1])
    countryCode_array.append(countryKey_array[i, 0])
    i += 1

x = np.reshape(countryCode_array, (len(countryCode_array), 1))
y = np.reshape(countryName_array, (len(countryName_array), 1))
output = np.concatenate((x, y), axis=1)
x = np.reshape(corr_bystate_array_sig, (len(corr_bystate_array_sig), 1))
y = np.reshape(pvalue_bystate_array_sig, (len(pvalue_bystate_array_sig), 1))
output2 = np.concatenate((x, y), axis=1)
x = np.reshape(corr_bystate_array_rat, (len(corr_bystate_array_rat), 1))
y = np.reshape(pvalue_bystate_array_rat, (len(pvalue_bystate_array_rat), 1))
output3 = np.concatenate((x, y), axis=1)
fileArray = np.concatenate((output, output2), axis=1)
fileArray = np.concatenate((fileArray, output3), axis=1)

# column 1 = country code
# column 2 = country name
# column 3 = signature correlation (all years for single state)
# column 4 = p-value for that correlation
# column 5 = ratification correlation (all years for single state)
# column 6 = p-value for that correlation
np.savetxt('state_correlation_output.txt', fileArray, fmt='%s', delimiter=',')


# CORRELATION OF TREATY CENTRALITY AND PROLIF LEVELS


j = startyear
worldproliflist = list()
while j <= endyear:
    worldproliflist.append(world_prolif_dict[j])
    j += 1

z = pearsonr(NPTratarray, worldproliflist)
NPTrat_corr = z[0]
NPTrat_pvalue = z[1]

z = pearsonr(NPTsigarray, worldproliflist)
NPTsig_corr = z[0]
NPTsig_pvalue = z[1]

z = pearsonr(NWFZratarray, worldproliflist)
NWFZrat_corr = z[0]
NWFZrat_pvalue = z[1]

z = pearsonr(NWFZsigarray, worldproliflist)
NWFZsig_corr = z[0]
NWFZsig_pvalue = z[1]


# COMMON ACTOR VALUES FOR RAW DATA


# RATIFICATION NETWORK
# store affiliation matrix (matrix A) for each year
j = startyear
rat_matrix_dict = {}
while j <= endyear:
    i = 0
    variable = np.empty((len(rat_treaty_dict[j]), 2))  # the 2 would be a 4 for full network
    while i < len(rat_treaty_dict[j]):
        h = 0
        while h < 2:  # would be < 4 for full network
            variable[i, h] = rat_treaty_dict[j][i, h+2]
            h += 1
        i += 1
    rat_matrix_dict[j] = variable
    j += 1

# calculating the transposes of affiliation matrices (matrix A') for each year
j = startyear
rat_matrix_dict_t = {}
while j <= endyear:
    matrix = rat_matrix_dict[j]
    tmatrix = matrix.transpose()
    rat_matrix_dict_t[j] = tmatrix
    j += 1

# common actors matrix XM for each year
j = startyear
comactor_rat_dict = {}
while j <= endyear:
    matrix = rat_matrix_dict[j]
    tmatrix = rat_matrix_dict_t[j]
    comactor_rat_dict[j] = np.dot(tmatrix, matrix)
    j += 1

# storing common actor values in array RATIFICATION NETWORK
j = startyear
comactor_rat_values_dict = {}
while j <= endyear:
    # checking to make sure they are equal
    if comactor_rat_dict[j][0, 1] == comactor_rat_dict[j][1, 0]:
        comactor_rat_values_dict[j] = comactor_rat_dict[j][0, 1]
    else:
        comactor_rat_values_dict[j] = 'not equal'
    j += 1

# make list of common actor values for RATIFICATION NETWORK
j = startyear
comactor_rat_list = list()
while j <= endyear:
    comactor_rat_list.append(comactor_rat_values_dict[j])
    j += 1

# correlating common actors values with global proliferation levels RATIFICATION NETWORK
z = pearsonr(worldproliflist, comactor_rat_list)
comactor_rat_corr = z[0]
comactor_rat_pvalue = z[1]


# SIGNATURE NETWORK
# store affiliation matrix (matrix A) for each year
j = startyear
sig_matrix_dict = {}
while j <= endyear:
    i = 0
    variable = np.empty((len(sig_treaty_dict[j]), 2))  # the 2 would be a 4 for full network
    while i < len(sig_treaty_dict[j]):
        h = 0
        while h < 2:  # would be < 4 for full network
            variable[i, h] = sig_treaty_dict[j][i, h+2]
            h += 1
        i += 1
    sig_matrix_dict[j] = variable
    j += 1

# calculating the transposes of affiliation matrices (matrix A') for each year
j = startyear
sig_matrix_dict_t = {}
while j <= endyear:
    matrix = sig_matrix_dict[j]
    tmatrix = matrix.transpose()
    sig_matrix_dict_t[j] = tmatrix
    j += 1

# common actors matrix XM for each year
j = startyear
comactor_sig_dict = {}
while j <= endyear:
    matrix = sig_matrix_dict[j]
    tmatrix = sig_matrix_dict_t[j]
    comactor_sig_dict[j] = np.dot(tmatrix, matrix)
    j += 1

# storing common actor values in array SIG
j = startyear
comactor_sig_values_dict = {}
while j <= endyear:
    # checking to make sure they are equal
    if comactor_sig_dict[j][0, 1] == comactor_sig_dict[j][1, 0]:
        comactor_sig_values_dict[j] = comactor_sig_dict[j][0, 1]
    else:
        comactor_sig_values_dict[j] = 'not equal'
    j += 1

# make list of common actor values for SIG
j = startyear
comactor_sig_list = list()
while j <= endyear:
    comactor_sig_list.append(comactor_sig_values_dict[j])
    j += 1

# correlating common actors values with global proliferation levels SIG
z = pearsonr(worldproliflist, comactor_sig_list)
comactor_sig_corr = z[0]
comactor_sig_pvalue = z[1]

# performing those same correlations on a per decade basis SIG & RAT
j = startyear
# comactor_sig_list_40s = list()
# comactor_sig_list_50s = list()
comactor_sig_list_60s = list()
comactor_sig_list_70s = list()
comactor_sig_list_80s = list()
comactor_sig_list_90s = list()  # includes 2000
# comactor_rat_list_40s = list()
# comactor_rat_list_50s = list()
comactor_rat_list_60s = list()
comactor_rat_list_70s = list()
comactor_rat_list_80s = list()
comactor_rat_list_90s = list()  # includes 2000
# worldproliflist_40s = list()
# worldproliflist_50s = list()
worldproliflist_60s = list()
worldproliflist_70s = list()
worldproliflist_80s = list()
worldproliflist_90s = list()  # includes 2000
# while j < 1950:
#     comactor_sig_list_40s.append(comactor_sig_values_dict[j])
#     comactor_rat_list_40s.append(comactor_rat_values_dict[j])
#     worldproliflist_40s.append(world_prolif_dict[j])
#     j += 1
# while j > 1949 and j < 1960:
#     comactor_sig_list_50s.append(comactor_sig_values_dict[j])
#     comactor_rat_list_50s.append(comactor_rat_values_dict[j])
#     worldproliflist_50s.append(world_prolif_dict[j])
#     j += 1
while j > 1966 and j < 1970:
    comactor_sig_list_60s.append(comactor_sig_values_dict[j])
    comactor_rat_list_60s.append(comactor_rat_values_dict[j])
    worldproliflist_60s.append(world_prolif_dict[j])
    j += 1
while j > 1969 and j < 1980:
    comactor_sig_list_70s.append(comactor_sig_values_dict[j])
    comactor_rat_list_70s.append(comactor_rat_values_dict[j])
    worldproliflist_70s.append(world_prolif_dict[j])
    j += 1
while j > 1979 and j < 1990:
    comactor_sig_list_80s.append(comactor_sig_values_dict[j])
    comactor_rat_list_80s.append(comactor_rat_values_dict[j])
    worldproliflist_80s.append(world_prolif_dict[j])
    j += 1
while j > 1989 and j < 2001:
    comactor_sig_list_90s.append(comactor_sig_values_dict[j])
    comactor_rat_list_90s.append(comactor_rat_values_dict[j])
    worldproliflist_90s.append(world_prolif_dict[j])
    j += 1

# correlating common actors values with global proliferation levels by decade
# 60s, 70s, 80s, 90s
comactor_sig_corr_bydecade = list()
comactor_sig_pvalue_bydecade = list()
comactor_rat_corr_bydecade = list()
comactor_rat_pvalue_bydecade = list()
# z = pearsonr(worldproliflist_40s, comactor_sig_list_40s)
# if z[0] != z[0]:
#     comactor_sig_corr_bydecade.append(0)
# else:
#     comactor_sig_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     comactor_sig_pvalue_bydecade.append(0)
# else:
#     comactor_sig_pvalue_bydecade.append(z[1])
# z = pearsonr(worldproliflist_40s, comactor_rat_list_40s)
# if z[0] != z[0]:
#     comactor_rat_corr_bydecade.append(0)
# else:
#     comactor_rat_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     comactor_rat_pvalue_bydecade.append(0)
# else:
#     comactor_rat_pvalue_bydecade.append(z[1])

# z = pearsonr(worldproliflist_50s, comactor_sig_list_50s)
# if z[0] != z[0]:
#     comactor_sig_corr_bydecade.append(0)
# else:
#     comactor_sig_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     comactor_sig_pvalue_bydecade.append(0)
# else:
#     comactor_sig_pvalue_bydecade.append(z[1])
# z = pearsonr(worldproliflist_50s, comactor_rat_list_50s)
# if z[0] != z[0]:
#     comactor_rat_corr_bydecade.append(0)
# else:
#     comactor_rat_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     comactor_rat_pvalue_bydecade.append(0)
# else:
#     comactor_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_60s, comactor_sig_list_60s)
if z[0] != z[0]:
    comactor_sig_corr_bydecade.append(0)
else:
    comactor_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_sig_pvalue_bydecade.append(0)
else:
    comactor_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_60s, comactor_rat_list_60s)
if z[0] != z[0]:
    comactor_rat_corr_bydecade.append(0)
else:
    comactor_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_rat_pvalue_bydecade.append(0)
else:
    comactor_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_70s, comactor_sig_list_70s)
if z[0] != z[0]:
    comactor_sig_corr_bydecade.append(0)
else:
    comactor_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_sig_pvalue_bydecade.append(0)
else:
    comactor_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_70s, comactor_rat_list_70s)
if z[0] != z[0]:
    comactor_rat_corr_bydecade.append(0)
else:
    comactor_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_rat_pvalue_bydecade.append(0)
else:
    comactor_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_80s, comactor_sig_list_80s)
if z[0] != z[0]:
    comactor_sig_corr_bydecade.append(0)
else:
    comactor_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_sig_pvalue_bydecade.append(0)
else:
    comactor_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_80s, comactor_rat_list_80s)
if z[0] != z[0]:
    comactor_rat_corr_bydecade.append(0)
else:
    comactor_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_rat_pvalue_bydecade.append(0)
else:
    comactor_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_90s, comactor_sig_list_90s)
if z[0] != z[0]:
    comactor_sig_corr_bydecade.append(0)
else:
    comactor_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_sig_pvalue_bydecade.append(0)
else:
    comactor_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_90s, comactor_rat_list_90s)
if z[0] != z[0]:
    comactor_rat_corr_bydecade.append(0)
else:
    comactor_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    comactor_rat_pvalue_bydecade.append(0)
else:
    comactor_rat_pvalue_bydecade.append(z[1])

decades_list = (60, 70, 80, 90)

# row 1 is common actor signature correlations
# row 2 is the p values
# row 3 is common actor ratification correlations
# row 4 is the p values
# column 1=60s, 2=70s, 3=80s, 4=90s
np.savetxt('common_actor_correlation_decades_output.txt', (comactor_sig_corr_bydecade, comactor_sig_pvalue_bydecade,
                                                           comactor_rat_corr_bydecade, comactor_rat_pvalue_bydecade), delimiter=',')


# DENSITY CALCULATIONS (RAW DATA)


# finding the density in each year for both sig and rat networks
j = startyear
density_rat_dict = {}
density_sig_dict = {}
density_rat_list = list()
density_sig_list = list()
while j <= endyear:
    # for RAT
    z = len(rat_matrix_dict[j])
    maxTies = z * 2
    ties = sum(sum(rat_matrix_dict[j]))
    variable = ties / maxTies
    density_rat_dict[j] = variable
    density_rat_list.append(variable)
    # for SIG
    z = len(sig_matrix_dict[j])
    maxTies = z * 2
    ties = sum(sum(sig_matrix_dict[j]))
    variable = ties / maxTies
    density_sig_dict[j] = variable
    density_sig_list.append(variable)
    j += 1

# correlate density with global proliferation levels RAT
z = pearsonr(worldproliflist, density_rat_list)
density_rat_corr = z[0]
density_rat_pvalue = z[1]

# correlate density with global proliferation levels SIG
z = pearsonr(worldproliflist, density_sig_list)
density_sig_corr = z[0]
density_sig_pvalue = z[1]

# performing those same correlations on a per decade basis SIG & RAT
j = startyear
# density_sig_list_40s = list()
# density_sig_list_50s = list()
density_sig_list_60s = list()
density_sig_list_70s = list()
density_sig_list_80s = list()
density_sig_list_90s = list()  # includes 2000
# density_rat_list_40s = list()
# density_rat_list_50s = list()
density_rat_list_60s = list()
density_rat_list_70s = list()
density_rat_list_80s = list()
density_rat_list_90s = list()  # includes 2000
# while j < 1950:
#     density_sig_list_40s.append(density_sig_dict[j])
#     density_rat_list_40s.append(density_rat_dict[j])
#     j += 1
# while j > 1949 and j < 1960:
#     density_sig_list_50s.append(density_sig_dict[j])
#     density_rat_list_50s.append(density_rat_dict[j])
#     j += 1
while j > 1966 and j < 1970:
    density_sig_list_60s.append(density_sig_dict[j])
    density_rat_list_60s.append(density_rat_dict[j])
    j += 1
while j > 1969 and j < 1980:
    density_sig_list_70s.append(density_sig_dict[j])
    density_rat_list_70s.append(density_rat_dict[j])
    j += 1
while j > 1979 and j < 1990:
    density_sig_list_80s.append(density_sig_dict[j])
    density_rat_list_80s.append(density_rat_dict[j])
    j += 1
while j > 1989 and j < 2001:
    density_sig_list_90s.append(density_sig_dict[j])
    density_rat_list_90s.append(density_rat_dict[j])
    j += 1

# correlating common actors values with global proliferation levels by decade
# 60s, 70s, 80s, 90s
density_sig_corr_bydecade = list()
density_sig_pvalue_bydecade = list()
density_rat_corr_bydecade = list()
density_rat_pvalue_bydecade = list()
# z = pearsonr(worldproliflist_40s, density_sig_list_40s)
# if z[0] != z[0]:
#     density_sig_corr_bydecade.append(0)
# else:
#     density_sig_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     density_sig_pvalue_bydecade.append(0)
# else:
#     density_sig_pvalue_bydecade.append(z[1])
# z = pearsonr(worldproliflist_40s, density_rat_list_40s)
# if z[0] != z[0]:
#     density_rat_corr_bydecade.append(0)
# else:
#     density_rat_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     density_rat_pvalue_bydecade.append(0)
# else:
#     density_rat_pvalue_bydecade.append(z[1])

# z = pearsonr(worldproliflist_50s, density_sig_list_50s)
# if z[0] != z[0]:
#     density_sig_corr_bydecade.append(0)
# else:
#     density_sig_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     density_sig_pvalue_bydecade.append(0)
# else:
#     density_sig_pvalue_bydecade.append(z[1])
# z = pearsonr(worldproliflist_50s, density_rat_list_50s)
# if z[0] != z[0]:
#     density_rat_corr_bydecade.append(0)
# else:
#     density_rat_corr_bydecade.append(z[0])
# if z[1] != z[1]:
#     density_rat_pvalue_bydecade.append(0)
# else:
#     density_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_60s, density_sig_list_60s)
if z[0] != z[0]:
    density_sig_corr_bydecade.append(0)
else:
    density_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_sig_pvalue_bydecade.append(0)
else:
    density_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_60s, density_rat_list_60s)
if z[0] != z[0]:
    density_rat_corr_bydecade.append(0)
else:
    density_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_rat_pvalue_bydecade.append(0)
else:
    density_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_70s, density_sig_list_70s)
if z[0] != z[0]:
    density_sig_corr_bydecade.append(0)
else:
    density_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_sig_pvalue_bydecade.append(0)
else:
    density_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_70s, density_rat_list_70s)
if z[0] != z[0]:
    density_rat_corr_bydecade.append(0)
else:
    density_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_rat_pvalue_bydecade.append(0)
else:
    density_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_80s, density_sig_list_80s)
if z[0] != z[0]:
    density_sig_corr_bydecade.append(0)
else:
    density_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_sig_pvalue_bydecade.append(0)
else:
    density_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_80s, density_rat_list_80s)
if z[0] != z[0]:
    density_rat_corr_bydecade.append(0)
else:
    density_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_rat_pvalue_bydecade.append(0)
else:
    density_rat_pvalue_bydecade.append(z[1])

z = pearsonr(worldproliflist_90s, density_sig_list_90s)
if z[0] != z[0]:
    density_sig_corr_bydecade.append(0)
else:
    density_sig_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_sig_pvalue_bydecade.append(0)
else:
    density_sig_pvalue_bydecade.append(z[1])
z = pearsonr(worldproliflist_90s, density_rat_list_90s)
if z[0] != z[0]:
    density_rat_corr_bydecade.append(0)
else:
    density_rat_corr_bydecade.append(z[0])
if z[1] != z[1]:
    density_rat_pvalue_bydecade.append(0)
else:
    density_rat_pvalue_bydecade.append(z[1])

# row 1 is density signature correlations
# row 2 is the p values
# row 3 is density ratification correlations
# row 4 is the p values
# column 1=60s, 2=70s, 3=80s, 4=90s
np.savetxt('density_correlation_decades_output.txt', (density_sig_corr_bydecade, density_sig_pvalue_bydecade,
                                                      density_rat_corr_bydecade, density_rat_pvalue_bydecade), delimiter=',')

print('code done running')


# PRINTING STUFF OUT

# print('NPT Signature Correlation: ', NPTsig_corr)
# print('NPT Signature p-value: ', NPTsig_pvalue)
# print('NPT Ratification Correlation: ', NPTrat_corr)
# print('NPT Ratification p-value: ', NPTrat_pvalue)
# print('NWFZ Signature Correlation: ', NWFZsig_corr)
# print('NWFZ Signature p-value: ', NWFZsig_pvalue)
# print('NWFZ Ratification Correlation: ', NWFZrat_corr)
# print('NWFZ Ratification p-value: ', NWFZrat_pvalue)

# print('NPT/NWFZ Common Actors Signature Correlation: ', comactor_sig_corr)
# print('NPT/NWFZ Common Actors Signature p-value: ', comactor_sig_pvalue)
# print('NPT/NWFZ Common Actors Ratification Correlation: ', comactor_rat_corr)
# print('NPT/NWFZ Common Actors Ratification p-value: ', comactor_rat_pvalue)

# print('Signature Density and Proliferation Correlation: ', density_sig_corr)
# print('Signature Density and Proliferation p-value: ', density_sig_pvalue)
# print('Ratification Density and Proliferation Correlation: ', density_rat_corr)
# print('Ratification Density and Proliferation p-value: ', density_rat_pvalue)


# PLOTS FOR PAPER

# # plot treaty centralities and label the lines for UPR poster (full network)
# # file name is Treaty EVCs_noNWS
# plt.plot(yeararray, NPTsigarray, 'b--', label='NPT Signature')  # blue dash
# plt.plot(yeararray, NPTratarray, 'b-', label='NPT Ratification')  # blue line
# plt.plot(yeararray, NWFZsigarray, 'y--', label='NWFZ Signature')  # yellow dash
# plt.plot(yeararray, NWFZratarray, 'y-', label='NWFZ Ratification')  # yellow line
# plt.xlabel('Year', fontsize='medium')
# plt.ylabel('Treaty EVC', fontsize='medium')
# plt.legend(loc=4, fontsize='medium')
# plt.title('Treaty EVCs in 1967-2000', fontsize='medium')
# plt.ylim(-0.1, 1.1)
# plt.xlim(1966, 2001)

# # plot NPT centralities versus global proliferation
# # file name is NPT Cent_noNWS
# plt.plot(worldproliflist, NPTratarray, 'ko', label='Ratification Network')
# plt.plot(worldproliflist, NPTsigarray, 'w^', label='Signature Network')
# plt.xlabel('Global Proliferation Level', fontsize='medium')
# plt.ylabel('NPT EVC', fontsize='medium')
# plt.legend(loc=4, fontsize='medium')
# plt.title('NPT EVC versus Global Proliferation', fontsize='medium')
# plt.ylim(-0.1, 1.1)
# plt.xlim(25, 45)

# # plot NWFZ centralities versus global proliferation
# # file name is NWFZ Cent_noNWS
# plt.plot(worldproliflist, NWFZratarray, 'ko', label='Ratification Network')
# plt.plot(worldproliflist, NWFZsigarray, 'w^', label='Signature Network')
# plt.xlabel('Global Proliferation Level', fontsize='medium')
# plt.ylabel('NWFZ EVC', fontsize='medium')
# plt.legend(loc=4, fontsize='medium')
# plt.title('NWFZ EVC versus Global Proliferation', fontsize='medium')
# plt.ylim(-0.1, 1.1)
# plt.xlim(25, 45)

# # plot both signature and ratification correlations
# # file name is Corr Values by Year_noNWS
# plt.plot(yeararray, corr_yearly_array_rat, 'ko', label='Ratification Network')
# plt.plot(yeararray, corr_yearly_array_sig, 'w^', label='Signature Network')
# plt.axhline(0, color='black', ls='dashed')
# plt.legend(loc=3, fontsize='medium')
# plt.title('Yearly Correlation Values', fontsize='medium')
# plt.xlabel('Year', fontsize='medium')
# plt.ylabel('State EVC/Proliferation Correlation Coefficient', fontsize='medium')

# # save sig and rat correlations in txt file
# x = np.reshape(yeararray, (len(yeararray), 1))
# y = np.reshape(corr_yearly_array_sig, (len(corr_yearly_array_sig), 1))
# output = np.concatenate((x, y), axis=1)
# x = np.reshape(pvalue_yearly_array_sig, (len(pvalue_yearly_array_sig), 1))
# y = np.reshape(corr_yearly_array_rat, (len(corr_yearly_array_rat), 1))
# output2 = np.concatenate((x, y), axis=1)
# x = np.reshape(pvalue_yearly_array_rat, (len(pvalue_yearly_array_rat), 1))
# fileArray = np.concatenate((output, output2), axis=1)
# fileArray = np.concatenate((fileArray, x), axis=1)
# # column 1 = year
# # column 2 = signature correlation
# # column 3 = signature p-values
# # column 4 = ratification correlation
# # column 5 = ratification p-values
# np.savetxt('yearly_correlations_output.txt', fileArray, fmt='%s', delimiter=',')

# # Output of State Centralities in 1974
# # file name is State Cent and Prolif_noNWS_1974
# x = np.reshape(country_centrality_sig_dict[1974][:, 0], (len(country_centrality_sig_dict[1974][:, 0]), 1))
# y = np.reshape(country_centrality_sig_dict[1974][:, 1], (len(country_centrality_sig_dict[1974][:, 1]), 1))
# output = np.concatenate((x, y), axis=1)
# z = np.reshape(country_centrality_rat_dict[1974][:, 1], (len(country_centrality_rat_dict[1974][:, 1]), 1))
# fileArray = np.concatenate((output, z), axis=1)
# # column 1 = country code
# # column 2 = signature centrality
# # column 3 = ratification centrality
# np.savetxt('state_centrality_1974_output.txt', fileArray, fmt='%s', delimiter=',')

# # plot state cent versus state prolif in 1974
# # file name is State Cent and Prolif_noNWS_1974
# plt.plot(prolif_dict[1974][:, 2], country_centrality_rat_dict[1974][:, 1], 'ko', label='Ratification Network')
# plt.plot(prolif_dict[1974][:, 2], country_centrality_sig_dict[1974][:, 1], 'w^', label='Signature Network')
# plt.legend(loc=1, fontsize='medium')
# plt.title('State EVC and Proliferation Levels in 1974', fontsize='medium')
# plt.xlabel('State Proliferation', fontsize='medium')
# plt.ylabel('State EVC', fontsize='medium')
# plt.xlim(-0.5, 3.5)
# plt.ylim(-0.05, 0.30)

# # plot common actors versus global proliferation SIG
# plt.plot(worldproliflist, comactor_sig_list, 'w^', label='Signature Common Actors')
# plt.title('Signature Network Common Actors', fontsize='medium')
# plt.xlabel('Global Proliferation Level', fontsize='medium')
# plt.ylabel('Number of Common NPT/NWFZ Members', fontsize='medium')
# plt.ylim(-5, 120)

# # plot common actors versus global proliferation RAT
# plt.plot(worldproliflist,comactor_rat_list, 'ko', label='Ratification Common Actors')
# plt.title('Ratification Network Common Actors', fontsize='medium')
# plt.xlabel('Global Proliferation Level', fontsize='medium')
# plt.ylabel('Number of Common NPT/NWFZ Members', fontsize='medium')
# plt.ylim(-5, 120)

# # plot density versus global proliferation SIG
# plt.plot(worldproliflist,density_sig_list, 'w^', label='Signature Density')
# plt.title('Signature Network Density', fontsize='medium')
# plt.xlabel('Global Proliferation Level', fontsize='medium')
# plt.ylabel('Network Density', fontsize='medium')
# plt.ylim(-0.1, 1)

# # plot density versus global proliferation RAT
# plt.plot(worldproliflist, density_rat_list, 'ko', label='Ratification Density')
# plt.title('Ratification Network Density', fontsize='medium')
# plt.xlabel('Global Proliferation Level', fontsize='medium')
# plt.ylabel('Network Density', fontsize='medium')
# plt.ylim(-0.1, 0.8)

# PLOTS FOR PRESENTATION

# # plot density correlations by decade
# plt.plot(decades_list, density_rat_corr_bydecade, 'ko', label='Ratification Correlation')
# plt.plot(decades_list, density_sig_corr_bydecade, 'w^', label='Signature Correlation')
# plt.legend(loc=3, fontsize='large')
# plt.title('Decade Density Correlation Values')
# plt.xlabel('Decade', fontsize='large')
# plt.ylabel('Density/Global Proliferation Correlation', fontsize='large')
# plt.xlim(55, 95)

# plot common actor correlations by decade
plt.plot(decades_list, comactor_rat_corr_bydecade, 'ko', label='Ratification Correlation')
plt.plot(decades_list, comactor_sig_corr_bydecade, 'w^', label='Signature Correlation')
plt.legend(loc=3, fontsize='large')
plt.title('Decade Common Actor Correlation Values')
plt.xlabel('Decade', fontsize='large')
plt.ylabel('Common Actor/Global Proliferation Correlation', fontsize='large')
plt.xlim(55, 95)


# PLOTS NOT FOR PAPER

# # plot treaty signature centralities and label the lines
# plt.plot(yeararray, NPTsigarray, 'b-', label='NPT Signature')
# plt.plot(yeararray, NWFZsigarray, 'y-', label='NWFZ Signature')
# plt.xlabel('Year', fontsize='large')
# plt.ylabel('Eigenvector Centrality', fontsize='large')
# plt.legend(loc=3, fontsize='large')
# plt.title('Signature Network')

# # plot treaty ratification centralities and label the lines
# plt.plot(yeararray, NPTratarray, 'b-', label='NPT Ratification')
# plt.plot(yeararray, NWFZratarray, 'y-', label='NWFZ Ratification')
# plt.xlabel('Year', fontsize='large')
# plt.ylabel('Eigenvector Centrality', fontsize='large')
# plt.legend(loc=3, fontsize='large')
# plt.title('Ratification Network')

# # plot world proliferation levels
# j = startyear
# worldproliflist = list()
# while j <= endyear:
#     worldproliflist.append(world_prolif_dict[j])
#     j += 1
# plt.plot(yeararray, worldproliflist, 'k-')  # black line
# plt.xlabel('Year', fontsize='large')
# plt.ylabel('Total World Proliferation Levels (Singh & Way)', fontsize='large')

# # scatter plot of state centralities against proliferation level
# # prolif_dict col 0 = ccode, col 1 = year, col 2 = prolif level (int)
# # country_centrality_sig_dict col 0 = ccode, col 1 = cent (float)
# # country_centrality_rat_dict col 0 = ccode, col 1 = cent (float)
# plt.plot(prolif_dict[1990][:, 2], country_centrality_sig_dict[1990][:, 1], 'ko')  # 1975, black dots
# plt.axis([-0.25, 3.25, -0.005, 0.1])
# plt.ylabel('State Centrality', fontsize='large')
# plt.xlabel('State Proliferation Level', fontsize='large')
# plt.title('Signature Network for 1990')

# plt.plot(prolif_dict[1990][:, 2], country_centrality_rat_dict[1990][:, 1], 'ko')  # 1975, black dots
# plt.axis([-0.25, 3.25, -0.005, 0.1])
# plt.ylabel('State Centrality', fontsize='large')
# plt.xlabel('State Proliferation Level', fontsize='large')
# plt.title('Ratification Network for 1990')

# # scatter plot of state proliferation level against centrality by year
# plt.plot(prolif_level_dict_bycountry[560], sig_cent_dict_bycountry[560], 'ko')
# plt.ylabel('State Centrality by Year', fontsize='large')
# plt.xlabel('Proliferation Level by Year', fontsize='large')
# plt.title('South Africa Signature Network')

# # scatter plot of a country's sig cent & prolif throughout time
# plt.plot(yeararray, prolif_level_dict_bycountry[560], 'b-', label='Proliferation Level')
# plt.plot(yeararray, sig_cent_dict_bycountry[560], 'ko', label='Signature Centrality')
# plt.legend(loc=3, fontsize='large')
# plt.title('South Africa Signature Network')
# plt.xlabel('Year', fontsize='large')
# plt.ylabel('Centrality / Proliferation Level', fontsize='large')

# # scatter plot of a country's rat cent & prolif throughout time
# plt.plot(yeararray, prolif_level_dict_bycountry[560], 'b-', label='Proliferation Level')
# plt.plot(yeararray, rat_cent_dict_bycountry[560], 'ko', label='Ratification Centrality')
# plt.legend(loc=3, fontsize='large')
# plt.title('South Africa Ratification Network')
# plt.xlabel('Year', fontsize='large')
# plt.ylabel('Centrality / Proliferation Level', fontsize='large')



# USELESS CODE THAT MAYBE I DON'T WANT TO DELETE YET

# # COMMON ACTOR CORRELATION FOR NORMALIZED DATA
#
# # storing common actor values in array RATIFICATION NETWORK
# j = startyear
# comactor_rat_values_dict = {}
# while j <= endyear:
#     # checking to make sure they are equal
#     if com_actor_rat_dict[j][0, 1] == com_actor_rat_dict[j][1, 0]:
#         comactor_rat_values_dict[j] = com_actor_rat_dict[j][0, 1]
#     else:
#         comactor_rat_values_dict[j] = 'not equal'
#     j += 1
#
# # make list of common actor values for RATIFICATION NETWORK
# j = startyear
# comactor_rat_list = list()
# while j <= endyear:
#     comactor_rat_list.append(comactor_rat_values_dict[j])
#     j += 1
#
# # storing common actor values in array SIGNATURE NETWORK
# j = startyear
# comactor_sig_values_dict = {}
# while j <= endyear:
#     # checking to make sure they are equal
#     if com_actor_sig_dict[j][0, 1] == com_actor_sig_dict[j][1, 0]:
#         comactor_sig_values_dict[j] = com_actor_sig_dict[j][0, 1]
#     else:
#         comactor_sig_values_dict[j] = 'not equal'
#     j += 1
#
# # make list of common actors values for SIGNATURE NETWORK
# j = startyear
# comactor_sig_list = list()
# while j <= endyear:
#     comactor_sig_list.append(comactor_sig_values_dict[j])
#     j += 1
#
# # correlating common actors values with global proliferation levels RATIFICATION NETWORK
# j = startyear
# z = pearsonr(worldproliflist, comactor_rat_list)
# comactor_rat_corr = z[0]
# comactor_rat_pvalue = z[1]
#
# # correlating common actors values with global proliferation levels SIGNATURE NETWORK
# j = startyear
# z = pearsonr(worldproliflist, comactor_sig_list)
# comactor_sig_corr = z[0]
# comactor_sig_pvalue = z[1]
#
# print('NPT/NWFZ Common Actors Ratification Correlation: ', comactor_rat_corr)
# print('NPT/NWFZ Common Actors Ratification p-value: ', comactor_rat_pvalue)
# print('NPT/NWFZ Common Actors Signature Correlation: ', comactor_sig_corr)
# print('NPT/NWFZ Common Actors Signature p-value: ', comactor_sig_pvalue)
